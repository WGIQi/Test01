<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	">
	<!-- classpath*:db.properties 到所有的classpath中寻找db.properties, 包含classpath中的jar依赖包 
		classpath:db.properties 到所有的classpath中寻找db.properties, "不"包含classpath中的jar依赖包 -->

	<context:property-placeholder
		location="classpath:db.properties,classpath:redis.properties" />

	<!-- 普通类注解扫描 -->
	<context:component-scan base-package="com.redis" />
	<!-- 配置数据源 -->
	<bean id="datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${DRIVER}" />
		<property name="jdbcUrl" value="${URL}" />
		<property name="user" value="${USER}" />
		<property name="password" value="${PASS}" />
		<property name="initialPoolSize" value="10"></property>
		<property name="maxPoolSize" value="50"></property>
	</bean>
	<!-- 配置事务管理器 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="datasource" />
	</bean>
	<!-- 事务注解扫描 -->
	<tx:annotation-driven transaction-manager="txManager" />

	<!-- 往ioc容器中注入sqlSessionFactory，进而生成sqlSession -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="datasource" />
		<!-- 直接加载Mapper映射文件 -->
		<property name="mapperLocations" value="classpath:com/redis/mapper/*Mapper.xml" />
		<!-- 配置别名 -->
		<property name="typeAliasesPackage" value="com.redis.domain,com.redis.mapper" />
	</bean>

	<!-- 扫描存储在相同包下的各种dao模型的接口映射 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 一定要扫描包，多个用逗号隔开,无需再配置 sqlSessionFactory，配置会报错 -->
		<property name="basePackage" value="com.redis.mapper" />
	</bean>

	<!-- jedis连接池配置. -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 连接池中最大连接数。高版本：maxTotal，低版本：maxActive -->
		<property name="maxTotal" value="${redis.pool.maxActive}" />
		<!-- 连接池中最大空闲的连接数. -->
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<!--连接池中最小空闲的连接数.-->
		<property name="minIdle" value="${redis.pool.minIdle}" />
		<!--最大等待时间 -->
		<property name="maxWaitMillis" value="${redis.pool.maxWait}" />
		<!--对拿到的connection进行validateObject校验 -->
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
		<!--在进行returnObject对返回的connection进行validateObject校验 -->
		<property name="testOnReturn" value="${redis.pool.testOnReturn}" />
	</bean>
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool"
		destroy-method="destroy">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<constructor-arg index="1" value="${redis.host}" />
		<constructor-arg index="2" value="${redis.port}" type="int" />
		<constructor-arg index="3" value="${redis.timeout}" type="int" />
	</bean>


</beans>











